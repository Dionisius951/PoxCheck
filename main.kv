import cv2
import numpy as np
import tensorflow as tf
from kivy.app import App
from kivy.uix.image import Image
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.graphics.texture import Texture

class ObjectDetectionApp(App):
    def build(self):
        # Atur ukuran window Kivy
        Window.size = (800, 600)

        # Membuat widget gambar untuk menampilkan frame
        self.image_widget = Image()

        # Memuat model TFLite
        self.model_path = "./model/detect.tflite"
        self.interpreter, self.input_details, self.output_details = self.load_tflite_model(self.model_path)

        if self.interpreter is None:
            print("Model tidak dapat dimuat.")
            exit()

        # Menyiapkan webcam
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            print("Tidak dapat membuka kamera.")
            exit()

        Clock.schedule_interval(self.update_frame, 1.0 / 30.0)
        
        return self.image_widget

    def load_tflite_model(self, model_path):
        try:
            interpreter = tf.lite.Interpreter(model_path=model_path)
            interpreter.allocate_tensors()
            input_details = interpreter.get_input_details()
            output_details = interpreter.get_output_details()
            print("Model TFLite berhasil dimuat.")
            return interpreter, input_details, output_details
        except Exception as e:
            print(f"Error saat memuat model: {e}")
            return None, None, None

    def preprocess_frame(self, frame, input_shape):
        try:
            frameRGB = frame
            frame_resized = cv2.resize(frameRGB, (input_shape[1], input_shape[0]))      
            frame_normalized = frame_resized / 255.0
            return np.expand_dims(frame_normalized.astype(np.float32), axis=0)
        except Exception as e:
            print(f"Error saat memproses frame: {e}")
            return None

    def run_inference(self, interpreter, input_details, output_details, input_data):
        try:
            interpreter.set_tensor(input_details[0]['index'], input_data)
            interpreter.invoke()
            boxes = interpreter.get_tensor(output_details[1]['index'])
            classes = interpreter.get_tensor(output_details[3]['index']) 
            scores = interpreter.get_tensor(output_details[0]['index'])
            return boxes, classes, scores
        except Exception as e:
            print(f"Error saat menjalankan inferensi: {e}")
            return None, None, None

    def draw_detections(self, frame, boxes, classes, scores, class_names, threshold=0.4):
        height, width, _ = frame.shape

        for i in range(len(scores)):
            if scores[i] > threshold: 
                box = boxes[i] 
                ymin, xmin, ymax, xmax = box
                startX, startY = int(xmin * width), int(ymin * height)
                endX, endY = int(xmax * width), int(ymax * height)

                class_id = int(classes[i])
                label = f"{class_names[class_id]} "

                cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)
                cv2.putText(frame, label, (startX, startY - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        return frame

    def update_frame(self, dt):
        ret, frame = self.cap.read()
        if not ret:
            print("Gagal membaca frame dari kamera.")
            return

        # Mengambil shape input dari model untuk menyesuaikan ukuran frame
        input_shape = self.input_details[0]['shape'][1:3]
        input_data = self.preprocess_frame(frame, input_shape)

        if input_data is not None:
            boxes, classes, scores = self.run_inference(self.interpreter, self.input_details, self.output_details, input_data)

            if boxes is not None and classes is not None and scores is not None:
                frame = self.draw_detections(frame, boxes[0], classes[0], scores[0], ["Monkeypox", "Chickenpox", "Acne", "Measles"])

        frame = cv2.flip(frame, 0) 
        frame_texture = self.convert_frame_to_texture(frame)

        self.image_widget.texture = frame_texture

    def convert_frame_to_texture(self, frame):
        buf = frame.tostring()
        buf = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB).tobytes()
        texture = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='rgb')
        texture.blit_buffer(buf, colorfmt='rgb', bufferfmt='ubyte')
        return texture

if __name__ == "__main__":
    ObjectDetectionApp().run()
